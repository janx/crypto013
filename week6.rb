require 'gmp'

def factor(n, limit)
  n = GMP::Z.new(n)
  limit = GMP::Z.new(limit)

  root, rem = n.sqrtrem()
  root += 1 if rem > 0

  limit += root
  a = root
  while a < limit
    x = (a*a - n).sqrt()
    p1 = a-x
    p2 = a+x
    if p1*p2 == n
      return [p1, p2]
    else
      a += 1
    end
  end
end

def factor2(n)
  n = GMP::Z.new(n)

  root, rem = (24*n).sqrtrem()
  b1 = root + 1 if rem > 0
  b2 = (b1*b1 - 24*n).sqrt()
  p1 = (b1+b2)/4
  p2 = (b1-b2)/6
  p p1 > p2
  p p2
  [p1, p2].sort
end

N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
#p factor(N1, 1)

N2 = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
#p factor(N2, 2**20)

N3 = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
#p factor2(N3)

def decrypt(ct, n, d)
  ct = GMP::Z.new(ct)
  pt = ct.powmod(d, n)
  hex = pt.to_s(16).split('00').last
  p hex.scan(/../).map {|code| code.to_i(16).chr }.join
end

CT = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540

p1, p2 = factor(N1, 1)
p(p1*p2 == N1)
fi = (p1-1)*(p2-1)
e = GMP::Z.new(65537)
d = e.invert(fi)
decrypt(CT, N1, d)
